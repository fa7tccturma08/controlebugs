// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ControleBugs.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Logar", new string[] {
            "RealizarLogin"}, Description="\tEu como usuario do bugtraker quero realizar login na aplicacao", SourceFile="Features\\RealizarLogin.feature", SourceLine=2)]
    public partial class LogarFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "RealizarLogin.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("pt"), "Logar", "\tEu como usuario do bugtraker quero realizar login na aplicacao", ProgrammingLanguage.CSharp, new string[] {
                        "RealizarLogin"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void LoginRealizadoComSucesso(string login, string senha, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "RealizarLoginComSucesso"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Login Realizado com Sucesso", null, @__tags);
#line 7
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
 testRunner.When(string.Format("eu preencho o {0} e a {1} validos", login, senha), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 9
 testRunner.And("seleciono a opcao logar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 10
 testRunner.Then("o sistema retornara o sistema apresenta  a funcionalidade de edição de usuários", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Login Realizado com Sucesso, \'bugtraker\'", new string[] {
                "RealizarLoginComSucesso"}, SourceLine=13)]
        public virtual void LoginRealizadoComSucesso_Bugtraker()
        {
#line 7
this.LoginRealizadoComSucesso("\'bugtraker\'", "\'Resource@123\'", ((string[])(null)));
#line hidden
        }
        
        public virtual void CamposObrigatoriosNaoInformados(string login, string senha, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CamposObrigatoriosNaoInformados"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Campos Obrigatorios Nao Informados", null, @__tags);
#line 17
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 18
 testRunner.When(string.Format("eu não preencho o {0} e a {1}", login, senha), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 19
 testRunner.And("tento efetuar login no sistema", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 20
 testRunner.Then("o sistema retornara a mensagem \"Login:campo é obrigatório\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Campos Obrigatorios Nao Informados, \'\'", new string[] {
                "CamposObrigatoriosNaoInformados"}, SourceLine=23)]
        public virtual void CamposObrigatoriosNaoInformados_()
        {
#line 17
this.CamposObrigatoriosNaoInformados("\'\'", "\'\'", ((string[])(null)));
#line hidden
        }
        
        public virtual void CampoLoginOuSenhaInvalido(string login, string senha, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CampoLoginOuSenhaInvalidos"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Campo Login ou Senha Invalido", null, @__tags);
#line 27
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 28
 testRunner.When(string.Format("eu preencho o {0} e a {1} com valores invalidos", login, senha), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 29
 testRunner.And("seleciono a opcao logar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 30
 testRunner.Then("o sistema aresenta  mensagem \"Login ou senha inválidos\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Campo Login ou Senha Invalido, \'bugtraker\'", new string[] {
                "CampoLoginOuSenhaInvalidos"}, SourceLine=33)]
        public virtual void CampoLoginOuSenhaInvalido_Bugtraker()
        {
#line 27
this.CampoLoginOuSenhaInvalido("\'bugtraker\'", "\'123\'", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion

